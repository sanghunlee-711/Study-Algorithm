description = """
  시간복잡도: 문제의 크기와 이를 해결하는데 걸리는 '시간' 사이의 관계
    - 평균 시간 복잡도: 임의의 입력패턴을 가정했을 때 소요되는 시간의 평균
    - 최악 시간 복잡도: 가장 긴 시간을 소요하게 만드는 입력에 따라 소요되는 시간

    Big-O Notation
      점근표기법(asyptotic notation)의 하나로 
      어떤 함수의 증가양상을 다른함수와의 비교로 표현한다.
      (알고리즘의 복잡도를 표현할 때 흔히 쓰임)
        ex) O(logn), O(n), O(2n^2)

        입력의 크기의 로그에 비례하는 시간소요, 입력의 크기에 비례하는 시간소요 등 ..
         -> 계수는 그다지 중요하지 않게 되는데 입력의 크기가 아주 커지면 어차피 입력의 크기에 따라 소요되는 값이 벌어지기 때문이다.


  공간복잡도: 문제의 크기와 이를 해결하는데 필요한 '메모리 공간'사이의 관계
"""

description2 = """
  선형 시간 알고리즘 -O(n)
  예: n개의 무작위로 나열된 수에서 최댓값을 찾기 위해 선형탐색 알고리즘을 적용
  최댓값 - 끝까지 다 살펴보기 전까지는 알 수 없게 되는 알고리즘으로 무조건 
  Average Case: O(n)
  Worst Case: O(n)

  로그 시간 알고리즘 - O(logn)
  예: n개의 크기 순으로 정렬된 수에서 특정값을 찾기 위해 이진탐색 알고리즘을 적용한 경우

  이차 시간 알고리즘 - O(n^2)
  예: 삽입정렬(insertion sort)
  Best Case: O(n)
  Worst Case: O(n^2)

  병합정렬 (merge sort) - O(nlogn)
  방법: 정렬할 데이터를 반씩 데이터 개수를 1개까지 나누어 각각을 정렬시킨다.
      다시 작은것 앞 큰 거 뒤로 하며 각자를 합치며 정렬하게 됨
      
    입력패턴에 따라 정렬 속도에 차이가 있지만 정렬문제에 대해 O(nlogn)보다 낮은 복잡도를 갖는
    알고리즘은 존재할 수 없음이 증명되어 있음.

"""
