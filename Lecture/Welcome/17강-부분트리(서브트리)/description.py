description = """
트리: node(정점)와 edge(간선)을 이용하여 데이터의 배치형태를 추상화한 자료구조이다.
  뿌리(루트)노드에서 간선(edge)들이 마치 나무에서 뿌리로부터 잔가지로
  뻗어나가듯이 가지치기된 구조를 말한다.

  보통 트리 표시시 루트를 위쪽에 오도록 그리기 때문에, 나무의 위 아래를 뒤집어 놓은 듯한 모양을 생각하게 된다.

  제일 밑에서 더이상 간선을 치는 것이 없으면 얘네들을 leaf 노드라 하고
  뿌리(root)도 leaf도 아닌 노드들을 Internal Node라고 한다

  - 간선으로 이어진 노드 사이에서 더 뿌리쪽에 가까운 노드를 Parent Node라고 하고 리프에 가까운걸 Child Node라 한다.
  - 같은 부모에 딸린 Child Node 들은 sibling Node라고 한다.
  - 부모의 부모(의 부모의 ..) - Ancestor Node(조상노드)
  - 자식의 자식(의 자식의 ..) - Descendant Node(후손노드)
  - 각노드들은 레벨이 정해져있고 루트노드는 Level 0 임(어떤책에서는 1로 시작하기도 한다.), 그 자식 노드는 1,그 자식의 자식은 2 ...
  - 트리의 높이(height) = 최대수준(level) + 1 이며 깊이라고도 한다.
  - 부분트리(Subtree) - 어떤 노드를 특정하고 그 노드 하위 자식들을 모두 빼내면 걔네를 서브트리라고 함.
  - 노드의 차수(Degree) - 자식(서브트리)의 수, 어떤 노드 입장에서 봤을 때 자기 자식들로 연결되는 간선(edge)의 개수가 노드의 차수가 됨
      루트노드를 제외한, 어떠한 하나의 노드에 차일드 노드는 여러개가 될 수 있으나 parent Node는 무조건 하나만 가지게 되는 것이 트리의 특징
      차수가 0이면 Leaf노드가 된다.
  
Binary Tree(이진트리): 모든 노드의 차수가 2 이하인 트리이다.
  이진트리는 재귀적으로 정의할 수 있는데, 
  
  루트노드와 왼쪽 서브트리, 오른쪽 서브트리 로 구성되는데 이때 왼쪽 오른쪽 모두의 서브트리가,
  각 이진트리이거나, 빈트리(empty Tree)이면 이진트리로 정의됨.

Full Binary Tree(포화 이진트리): 모든 레벨에서 노드들이 모두 채워져 있는 이진 트리
  높이가 k 이고 노드의 개수가 2^k -1 인 이진트리이다. 가 정의이고 높이가 k인데 개수가 2^k -1개를 성립하면
  무조건 이진트리가 되는 것.

  Complete Binary Tree(완전 이진트리): 높이 k인 이진트리를 말하며
  레벨 k-2까지는 모든 노드가 2개의 자식을 가진 포화 이진트리이고,
  레벨 k-1 에서는 왼쪽부터 노드가 순차적으로 채워져 있는 이진트리이다.
"""
