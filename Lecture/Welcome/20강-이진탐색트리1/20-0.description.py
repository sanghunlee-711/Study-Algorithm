description = """
이진탐색트리는 이진트리의 일종이며 이진 탐색 알고리즘과 비스무리하게 진행 가능하다.
  매 반복에서 탐색 대상이 되는 배열의 길이를 반으로 만들어나가는 알고리즘으로 실행시간은 배열길이가 n이라고 할 때
  log(n)[밑이 2 임]를 따르게 된다.


  이진탐색트리에서는 
  모든 노드에 대해서 왼쪽 서브트리에 들어있는 데이터는 모두 현재노드의 값(키)보다 작고 
  오른쪽 서브트리에 들어있는 데이터는 모두 현재 노드의 값보다 크도록 
  트리를 유지한다.  이러한 성질을 만족하는 이진트리를 -> 이진탐색트리라고한다. 
  여기서 중복되는 데이터는 없는 것으로 가정하고 진행한다.

  탐색을 하는 경우 루트노드에서 시작하여 한번에 한단계 씩 간선을 따라 아래로 아래로 내려가는데 어느 노드 방문 시 이 노드에 담긴 데이터 원소보다
  찾고자 하는 키가 더 작은 경우 -> 왼쪽 서브트리를
  더 큰 경우 -> 오른쪽 서브트리를 택한다.
  이렇게 해서 못찾으면 이 이진탐색트리에는 찾고 싶은 값이 없는 것임

  조건이 재귀적인 냄새가 나므로 재귀적인 성질을 가진 트리 자료구조를 제대로 활용하면 메서드 짜기 쉬울듯.

  메서드는 아래와 같음
  insert(): 트리에 주어진 데이터 원소를 추가
  remove(): 특정 원소를 트리로부터 삭제 -> 복잡
  lookup(): 특정 원소를 검색(탐색)
  inorder(): 키의 순서대로 데이터 원소들을 나열
  min(), max(): 최소, 최대 키를 가지는 원소를 각각 탐색

  가장 중심이 되는 연산은 탐색인 lookup()이며 실행시간은 트리의 높이(깊이)에 비래하므로 평균적으로 lon(n)에 비례하게 됨.
  선형배열이 아닌 트리구조이기 때문에 insert, remove와 같은 연산도 log(n)의 시간이 걸리게 된다.
  평균적인 연산 시간이라고 언급되는 이유는 21강에서 ..

"""
